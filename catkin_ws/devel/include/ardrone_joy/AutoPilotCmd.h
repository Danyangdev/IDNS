// Generated by gencpp from file ardrone_joy/AutoPilotCmd.msg
// DO NOT EDIT!


#ifndef ARDRONE_JOY_MESSAGE_AUTOPILOTCMD_H
#define ARDRONE_JOY_MESSAGE_AUTOPILOTCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ardrone_joy
{
template <class ContainerAllocator>
struct AutoPilotCmd_
{
  typedef AutoPilotCmd_<ContainerAllocator> Type;

  AutoPilotCmd_()
    : autopilot_breaker_state(false)
    , newpos()
    , neworientation()
    , no_of_points(0)
    , autopilot_mode()  {
    }
  AutoPilotCmd_(const ContainerAllocator& _alloc)
    : autopilot_breaker_state(false)
    , newpos(_alloc)
    , neworientation(_alloc)
    , no_of_points(0)
    , autopilot_mode(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _autopilot_breaker_state_type;
  _autopilot_breaker_state_type autopilot_breaker_state;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _newpos_type;
  _newpos_type newpos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _neworientation_type;
  _neworientation_type neworientation;

   typedef int8_t _no_of_points_type;
  _no_of_points_type no_of_points;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _autopilot_mode_type;
  _autopilot_mode_type autopilot_mode;





  typedef boost::shared_ptr< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> const> ConstPtr;

}; // struct AutoPilotCmd_

typedef ::ardrone_joy::AutoPilotCmd_<std::allocator<void> > AutoPilotCmd;

typedef boost::shared_ptr< ::ardrone_joy::AutoPilotCmd > AutoPilotCmdPtr;
typedef boost::shared_ptr< ::ardrone_joy::AutoPilotCmd const> AutoPilotCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ardrone_joy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ardrone_joy': ['/home/apollo/catkin_ws/src/controller/executor/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55b6eb0541581563846f8e0c40c709a5";
  }

  static const char* value(const ::ardrone_joy::AutoPilotCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55b6eb0541581563ULL;
  static const uint64_t static_value2 = 0x846f8e0c40c709a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ardrone_joy/AutoPilotCmd";
  }

  static const char* value(const ::ardrone_joy::AutoPilotCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool autopilot_breaker_state\n\
float64[] newpos\n\
float64[] neworientation\n\
int8 no_of_points\n\
string autopilot_mode\n\
";
  }

  static const char* value(const ::ardrone_joy::AutoPilotCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.autopilot_breaker_state);
      stream.next(m.newpos);
      stream.next(m.neworientation);
      stream.next(m.no_of_points);
      stream.next(m.autopilot_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutoPilotCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_joy::AutoPilotCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ardrone_joy::AutoPilotCmd_<ContainerAllocator>& v)
  {
    s << indent << "autopilot_breaker_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autopilot_breaker_state);
    s << indent << "newpos[]" << std::endl;
    for (size_t i = 0; i < v.newpos.size(); ++i)
    {
      s << indent << "  newpos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.newpos[i]);
    }
    s << indent << "neworientation[]" << std::endl;
    for (size_t i = 0; i < v.neworientation.size(); ++i)
    {
      s << indent << "  neworientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.neworientation[i]);
    }
    s << indent << "no_of_points: ";
    Printer<int8_t>::stream(s, indent + "  ", v.no_of_points);
    s << indent << "autopilot_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.autopilot_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDRONE_JOY_MESSAGE_AUTOPILOTCMD_H
